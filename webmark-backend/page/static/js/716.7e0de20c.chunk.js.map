{"version":3,"file":"static/js/716.7e0de20c.chunk.js","mappings":"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","sources":["../node_modules/dagre-d3-es/src/dagre/data/list.js","../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../node_modules/dagre-d3-es/src/dagre/acyclic.js","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/_baseGt.js","../node_modules/lodash-es/max.js","../node_modules/lodash-es/last.js","../node_modules/lodash-es/mapValues.js","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/min.js","../node_modules/dagre-d3-es/src/dagre/util.js","../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../node_modules/dagre-d3-es/src/dagre/normalize.js","../node_modules/lodash-es/minBy.js","../node_modules/dagre-d3-es/src/dagre/rank/util.js","../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/toInteger.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","../node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","../node_modules/lodash-es/_asciiSize.js","../node_modules/lodash-es/_hasUnicode.js","../node_modules/lodash-es/_unicodeSize.js","../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../node_modules/dagre-d3-es/src/dagre/rank/index.js","../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../node_modules/lodash-es/cloneDeep.js","../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../node_modules/lodash-es/_baseZipObject.js","../node_modules/lodash-es/zipObject.js","../node_modules/lodash-es/_baseSortBy.js","../node_modules/lodash-es/_compareAscending.js","../node_modules/lodash-es/_compareMultiple.js","../node_modules/lodash-es/_baseOrderBy.js","../node_modules/lodash-es/sortBy.js","../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../node_modules/dagre-d3-es/src/dagre/order/sort.js","../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../node_modules/dagre-d3-es/src/dagre/order/index.js","../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../node_modules/lodash-es/forOwn.js","../node_modules/lodash-es/forIn.js","../node_modules/dagre-d3-es/src/dagre/position/bk.js","../node_modules/dagre-d3-es/src/dagre/position/index.js","../node_modules/dagre-d3-es/src/dagre/layout.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/uniqueId.js","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/defaults.js","../node_modules/lodash-es/_baseRange.js","../node_modules/lodash-es/range.js","../node_modules/lodash-es/_createRange.js","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/map.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/_basePick.js","../node_modules/lodash-es/pick.js","../node_modules/lodash-es/_flatRest.js"],"sourcesContent":["/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import baseProperty from './_baseProperty.js';\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nexport default asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nexport default unicodeSize;\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n"],"names":["List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","toString","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_","greedyFAS","g","weightFn","nodeCount","state","fasGraph","Graph","maxIn","maxOut","nodes","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","Math","max","node","buckets","map","zeroIdx","assignBucket","graph","buildState","results","sources","length","sinks","removeNode","i","concat","doGreedyFAS","outEdges","collectPredecessors","undefined","inEdges","uEntry","wEntry","run","fas","acyclicer","stack","visited","dfs","dfsFAS","label","removeEdge","forwardName","name","reversed","array","iteratee","comparator","index","value","current","computed","isSymbol","result","other","baseExtremum","identity","baseGt","object","baseIteratee","baseForOwn","key","baseAssignValue","baseLt","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","order","addBorderNode","prefix","arguments","time","fn","start","console","log","notime","prop","sg","sgNode","borderType","prev","util","setParent","undo","rankDir","rankdir","toLowerCase","reverseYOne","points","reverseY","swapXYOne","swapXY","swapWidthHeight","swapWidthHeightOne","dummyChains","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","normalizeEdge","longestPath","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","findIndexFunc","collection","predicate","fromIndex","iterable","Object","isArrayLike","keys","toFinite","remainder","nativeMax","createFind","toInteger","baseFindIndex","baseProperty","RegExp","rsAstralRange","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","CycleException","vs","navigation","isDirected","successors","neighbors","bind","acc","doDfs","postorder","prototype","networkSimplex","simpleLabel","simplify","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg","slice","child","childLab","parent","cutvalue","calcCutValue","assignCutValue","childIsTail","graphEdge","cutValue","u","isOutEdge","pointsToHead","otherWeight","hasEdge","otherCutValue","tree","root","dfsAssignLowLim","nextLim","low","lim","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","f","flipped","updateRanks","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","depth","treeDepths","nodeSep","nestingRoot","sumWeights","nodeRankFactor","top","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","baseClone","CLONE_DEEP_FLAG","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","minRank","borderLeft","borderRight","props","values","assignFunc","valsLength","baseZipObject","assignValue","comparer","sort","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","orders","objCriteria","criteria","othCriteria","ordersLength","compareAscending","iteratees","arrayMap","isArray","baseGet","baseUnary","baseMap","baseSortBy","compareMultiple","baseRest","isIterateeCall","baseOrderBy","baseFlatten","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","Array","forEach","weightSum","resolveConflicts","entries","cg","mappedEntries","tmp","indegree","barycenter","entryV","entryW","sourceSet","handleIn","vEntry","merged","target","source","sum","min","mergeEntries","handleOut","pop","reverse","doResolveConflicts","biasRight","bias","parts","lhs","rhs","sortable","unsortable","vsIndex","consumeUnsortable","last","sortSubgraph","movable","bl","br","subgraphs","barycenters","inV","nodeU","subgraphResult","expandSubgraphs","predecessors","blPred","brPred","downLayerGraphs","buildLayerGraphs","upLayerGraphs","simpleNodes","layers","orderedVs","initOrder","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","ranks","layerGraphs","lg","sorted","rootPrev","prevChild","addSubgraphConstraints","layer","parentDummyChains","postorderNums","pathData","lca","vPath","wPath","path","findPath","pathIdx","pathV","ascending","castFunction","baseFor","keysIn","findType1Conflicts","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","conflictsV","hasConflict","horizontalCompaction","align","reverseSep","xs","blockG","blockGraph","graphLabel","sepFn","edgeSep","sep","nodesep","edgesep","vRoot","uRoot","prevMax","buildBlockGraph","iterate","setXsFunc","nextNodesFunc","elem","reduce","positionX","adjustedLayering","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","findType2Conflicts","xss","vert","horiz","inner","neighborFn","prevIdx","ws","mp","floor","il","ceil","verticalAlignment","smallestWidth","NEGATIVE_INFINITY","halfWidth","findSmallestWidthAlignment","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","alignCoordinates","ul","ignore","balance","position","rankSep","ranksep","prevY","maxHeight","positionY","layout","opts","debugTiming","layoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","buildLayoutGraph","labeloffset","makeSpaceForEdgeLabels","selfEdges","removeSelfEdges","acyclic","nestingGraph","injectEdgeLabelProxies","offset","assignRankMinMax","removeEdgeLabelProxies","normalize","addBorderSegments","orderShift","selfEdge","insertSelfEdges","coordinateSystem","selfNode","positionSelfEdges","b","l","r","removeBorderNodes","origLabel","fixupEdgeLabelCoords","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","translateGraph","p1","p2","nodeV","nodeW","unshift","assignNodeIntersects","reversePointsForReversedEdges","runLayout","inputLabel","layoutLabel","updateInputGraph","obj","newAttrs","INFINITY","toNumber","idCounter","id","baseEach","objectProto","hasOwnProperty","guard","propsIndex","propsLength","eq","call","nativeCeil","end","step","fromRight","baseRange","createRange","customizer","isObject","castPath","lastIndex","nested","toKey","newValue","objValue","isIndex","paths","baseSet","basePickBy","hasIn","func","setToString","overRest","flatten","flatRest","basePick"],"sourceRoot":""}