{"version":3,"file":"static/js/333.9fddd24f.chunk.js","mappings":"ohBAqCA,MAAMA,EAAc,CAChBC,OAAQ,GACRC,cAAe,GACfC,WAAY,OACZC,gBAAiB,SAGf,OAAEC,EAAM,QAAEC,EAAO,MAAEC,GAAUC,EAAAA,EAG7BC,EAAeC,IACV,CACHC,OAASC,GACLA,EAAUC,KAAI,IAAOC,KACjBC,EAAAA,EAAAA,IAAMD,EAAM,CAAC,QAAS,SAAUE,IACJ,kBAAbA,EAAKC,KAAqBD,EAAKC,IAAIC,WAAW,UACrDF,EAAKC,IAAM,GAAGP,KAAaM,EAAKC,IAAIE,QAAQ,OAAQ,MACxD,GACF,MAKZC,EAAeC,IAAmB,IAAlB,SAAEC,GAAUD,EAC9B,MAAO,CACHE,aAAcC,IAAiB,IAAhB,OAAEC,GAAQD,EACrB,MAAME,EAAKD,EACLE,EAAUD,EAAGE,oBAEbC,EAAWC,IACbA,EAAEC,iBACFD,EAAEE,iBAAiB,EAIjBC,EAAaC,UACfL,EAAQC,GACR,MAAMK,EAAQC,MAAMC,KAAKP,EAAEQ,aAAaH,OACxC,IAAK,MAAMI,KAAQJ,EAAO,CACtB,MAAMlB,QAAYK,EAASiB,GAC3B,IAAIC,EACAD,EAAKE,KAAKvB,WAAW,UACf,OAAOD,KACP,IAAIsB,EAAKG,SAASzB,KAC5BS,EAAGiB,iBAAiBH,EAAW,KACnC,GAIEI,EAAcV,UAChB,MAAMW,EAAQf,EAAEgB,cAAcD,MAC9B,GAAKA,EAEL,IAAK,MAAME,KAAQF,EACf,GAAkB,SAAdE,EAAKC,KAAiB,CACtB,MAAMT,EAAOQ,EAAKE,YAClB,IAAKV,EAAM,SAEX,MAAMtB,QAAYK,EAASiB,GAC3B,IAAIC,EACAD,EAAKE,KAAKvB,WAAW,UACf,OAAOD,KACP,IAAIsB,EAAKG,SAASzB,KAC5BS,EAAGiB,iBAAiBH,EAAW,MAC/BV,EAAEC,gBACN,CACJ,EAQJ,OALAJ,EAAQuB,iBAAiB,WAAYrB,GACrCF,EAAQuB,iBAAiB,OAAQjB,GACjCN,EAAQuB,iBAAiB,QAASN,GAG3B,KACHjB,EAAQwB,oBAAoB,WAAYtB,GACxCF,EAAQwB,oBAAoB,OAAQlB,GACpCN,EAAQwB,oBAAoB,QAASP,EAAY,CACpD,EAER,EAiaL,EAxWkBQ,KACd,MAAOC,IAAgBC,EAAAA,EAAAA,MACjB5C,EAAY2C,EAAaE,IAAI,aAC7BC,EAAU,EACZC,EAAAA,EAAAA,GAAI,CACAC,OAAQC,IA1DT,CACHC,OAAShD,GACEA,EAAUC,KAAI,IAAOC,KACxBC,EAAAA,EAAAA,IAAMD,EAAM,WAAW,CAACE,EAAM6C,EAAOC,KAAY,IAADC,EAAAC,EAE5C,GAAqB,QAAjBhD,EAAKiD,SAAqD,UAAnB,QAAbF,EAAA/C,EAAKkD,gBAAQ,IAAAH,GAAK,QAALC,EAAbD,EAAgB,UAAE,IAAAC,OAAL,EAAbA,EAAoBC,SAAoB,CAClE,MACME,EADWnD,EAAKkD,SAAS,GACNA,SAASE,KAAKC,GAAUA,EAAMC,OAAS,KAAIC,KAAK,IAEzEvD,EAAKkD,SAASM,MACVC,EAAAA,EAAAA,GACI,SACA,CACIhC,KAAM,SACNiC,MAAO,WACP,YAAaP,EACbQ,MAAO,4BAEX,iBAGR3D,EAAK4D,WAAWC,WAAa7D,EAAK4D,WAAWC,WAAa,IAAIC,OAAO,YACzE,CAGA,GAAqB,SAAjB9D,EAAKiD,SAA0C,SAAd,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQG,SAAmB,CACtD,MAAME,EAAUnD,EAAKkD,SAASE,KAAKC,GAAUA,EAAMC,OAAS,KAAIC,KAAK,IAErET,EAAOI,SAASL,IAASY,EAAAA,EAAAA,GACrB,OACA,CAAEC,MAAO,uBACT,CACI1D,GACAyD,EAAAA,EAAAA,GACI,SACA,CACIhC,KAAM,SACNiC,MAAO,kBACP,YAAaP,EACbQ,MAAO,4BAEX,iBAIhB,IACF,MAeVI,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAK,CACDtB,OAAQuB,EACRC,aAAc,CAAEC,OAAQ,aAE5BC,EAAAA,EAAAA,GAAQ,CACJ1B,OAAQ2B,IAEZ5E,EAAYC,GACZU,EAAa,CACTE,SAAWiB,GAAS,IAAI+C,SAAQ,CAACC,EAASC,KACtC,GAAKjD,EAAL,CAIA,IAAIkD,EAAW,IAAIC,SAEfhD,EAAO,GAAGiD,KAAKC,SAASrD,EAAKG,OACjC+C,EAASI,OAAO,OAAQtD,EAAMG,GAE9B,IAAIoD,EAAM,IAAIC,eAEdD,EAAIE,OAAO9C,iBAAiB,YAAapB,IACrC,GAAIA,EAAEmE,iBAAkB,CACpB,IAAIC,EAAWpE,EAAEqE,OAASrE,EAAEsE,MAAS,IACrCF,EAAUG,SAASH,GACnBI,QAAQC,IAAI,iCAAUL,EAAU,IACpC,KAGJJ,EAAI5C,iBAAiB,QAASpB,IAC1BwE,QAAQC,IAAI,4BACZhB,EAAQ,GAAGiB,MAAU9D,IAAO,IAGhCoD,EAAI5C,iBAAiB,SAAUpB,IAC3BwE,QAAQC,IAAI,2BAAO,IAGvBT,EAAI5C,iBAAiB,SAAUpB,IAC3BwE,QAAQC,IAAI,2BAAO,IAGvBT,EAAIW,KAAK,OAAQ,WAAW/F,KAAa8F,MACzCV,EAAIY,KAAKjB,EA/BT,CA+BkB,QAIvBkB,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAE1CG,EAAiBC,IAAsBJ,EAAAA,EAAAA,UAAS,CAAC,IACjDK,EAAwBC,IAA6BN,EAAAA,EAAAA,WAAS,IAI9DO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAS,KACpCS,EAAmBC,IAAwBV,EAAAA,EAAAA,WAAS,IAEpDW,EAASC,IAAcZ,EAAAA,EAAAA,UAAS,KAChCL,GAAQkB,KAAab,EAAAA,EAAAA,UAAS,KAC9Bc,GAAYC,KAAiBf,EAAAA,EAAAA,WAAS,IACtCgB,GAAYC,IAAiBC,EAAAA,GAAQC,aAEtCC,IAAUC,EAAAA,EAAAA,QAAOV,GACjBW,IAAUD,EAAAA,EAAAA,QAAO1B,KAEvB4B,EAAAA,EAAAA,YAAU,KACNH,GAAQI,QAAUb,CAAO,GAC1B,CAACA,KACJY,EAAAA,EAAAA,YAAU,KACND,GAAQE,QAAU7B,EAAM,GACzB,CAACA,MAEJ4B,EAAAA,EAAAA,YAAU,KACN,MAAME,EAAWxG,IACb,MAAMyG,EAAMzG,EAAE0G,OAAOC,QAAQ,+BAC7B,GAAIF,EAAK,CACL,MAAMG,EAAOH,EAAII,aAAa,aAC9BC,UAAUC,UAAUC,UAAUJ,GAAMK,MAAK,KAErCR,EAAIS,YAAc,SAClBC,YAAW,KACPV,EAAIS,YAAc,cAAI,GACvB,KAAK,GAEhB,GAIJ,OADAE,SAAShG,iBAAiB,QAASoF,GAC5B,IAAMY,SAAS/F,oBAAoB,QAASmF,EAAQ,GAC5D,CAACd,IAEJ,MAAM2B,GAAiBA,KAEnBC,MAAM,iBAAkB,CACpBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,MAAOhJ,EACPiJ,MAAOhD,MAGVoC,MAAKa,GAAYA,EAASC,SAC1Bd,MAAKe,IACEA,EAAEC,IACFhD,EAAgB+C,EAAEE,MACdF,EAAEE,MACFC,GAAaH,EAAEE,KAAK,GAApBC,IAGJpC,GAAWpB,KAAK,CACZhE,KAAM,QACNyH,QAASJ,EAAEK,KAEnB,GACF,GAGV/B,EAAAA,EAAAA,WAAUe,GAAgB,IAE1B,MAAMiB,GAAeA,KACjBhB,MAAM,oBAAoB1I,KAAayH,GAAQE,UAAW,CACtDgB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMtB,GAAQI,UAEbU,MAAKa,GAAYA,EAASC,SAC1Bd,MAAKe,IACEA,EAAEC,GAEFlC,GAAWpB,KAAK,CACZhE,KAAM,UACNyH,QAAS,6BAGbrC,GAAWpB,KAAK,CACZhE,KAAM,QACNyH,QAASJ,EAAEK,KAEnB,GACF,EAyBJF,GAAgBzD,GAAW,KACxBA,IAGLkB,GAAUlB,GACV4C,MAAM,IAAI1I,KAAa8F,OAAa,CAChC6C,OAAQ,MACRC,QAAS,CACL,gBAAiB,cAGpBP,MAAKa,GAAYA,EAASS,SAC1BtB,MAAKe,IACFrC,EAAWqC,GACXlC,IAAc,EAAK,IACrB,EA8BV,OACI0C,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAArG,SAAA,CACK4D,IACD0C,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAAC9F,MAAM,2BAAO8B,KAAMS,EAAwBwD,KAvEtCC,KAChBvB,MAAM,iBAAiB1I,KAAasG,EAAgBR,SAAU,CAC1D6C,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM,4HAILR,MAAKa,GAAYA,EAASC,SAC1Bd,MAAKe,IACEA,EAAEC,IACFZ,KACAhC,GAA0B,IAE1BU,GAAWpB,KAAK,CACZhE,KAAM,QACNyH,QAASJ,EAAEK,KAEnB,GACF,EAkDmES,SAAUA,KAC3EzD,GAA0B,EAAM,EAClCjD,UACEsG,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CAACC,YAAY,2BAAOxG,MAAO0C,EAAgBR,OAAQuE,SAAWjJ,IAChEmF,EAAmB,CACfT,OAAQ1E,EAAE0G,OAAOlE,OACnB,OAGVkG,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAAC9F,MAAM,qBAAM8B,KAAMa,EAAmBoD,KAAMA,KAC9CnD,GAAqB,EAAM,EAC5BqD,SAAUA,KACTrD,GAAqB,EAAM,EAC7BrD,UACEoG,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAACC,UAAU,WAAU/G,SAAA,EACvBsG,EAAAA,EAAAA,KAACK,EAAAA,EAAMK,SAAQ,CAACJ,YAAY,eAAKxG,MAAO8C,EAAW2D,SAAWjJ,IAC1DuF,EAAavF,EAAE0G,OAAOlE,MAAM,KAEhCgG,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAAA9G,SAAA,EACFsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAAC1I,KAAK,UAAU2I,QA9B3BC,KACZ,IAAIC,EAAQC,IAAAA,IAAaF,QAAQ7D,EAASJ,GAAWoE,WACrD/D,EAAW6D,EAAM,EA4BuCpH,SAAC,kBACzCsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACC,QA3BZK,KACZ,IAAIC,EAAQH,IAAAA,IAAaE,QAAQjE,EAASJ,GAAWoE,SAASD,IAAAA,IAAaI,MAC3ElE,EAAWiE,EAAM,EAyBwBxH,SAAC,0BAItCoG,EAAAA,EAAAA,MAAC9J,EAAAA,EAAM,CAACqE,UAAU,SAAQX,SAAA,EACtBsG,EAAAA,EAAAA,KAACnK,EAAM,CAACwE,UAAU,SAAQX,UACtBoG,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAAA9G,SAAA,CACDxD,GACD8J,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACS,MAAMpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAY,IAAKT,QAASA,KACrCU,OAAOC,SAASC,KAAO,GAAG,EAC5B9H,SAAC,kBACHoG,EAAAA,EAAAA,MAACU,EAAAA,EAAMiB,QAAO,CAACC,MAAO,CAAEC,MAAO,QAASjI,SAAA,EACpCsG,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CAACuB,UAAYC,IACA,UAAXA,EAAE3D,MACFS,IACJ,EACD7E,MAAOqC,EAAUmE,YAAY,qBAAMC,SAAWjJ,GAAM8E,EAAY9E,EAAE0G,OAAOlE,UAC5EkG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACC,QAASjC,GAAgByC,MAAMpB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAc,IAAIpI,SAAC,qBAE/DsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACS,MAAMpB,EAAAA,EAAAA,KAAC+B,EAAAA,EAAmB,IAAKnB,QAASA,KAC5CjE,GAA0B,EAAK,EACjCjD,SAAC,8BACHsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACS,MAAMpB,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,IAAKpB,QAASA,KACvCU,OAAOrF,KAAK,WAAW/F,IAAY,EACrCwD,SAAC,8BACHsG,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CACP9H,MAAM,2BACN+H,YAAY,6CACZC,UApEI7K,IACxBsH,MAAM,cAAc1I,IAAa,CAC7B2I,OAAQ,WAEPN,MAAKa,GAAYA,EAASS,SAC1BtB,MAAKe,IACFgC,OAAOC,SAASC,KAAO,GAAG,GAC5B,EA8DcpB,SAAW9I,MACX8K,OAAO,SACPC,WAAW,SAAG3I,UAEdsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAAC2B,QAAM,EAAClB,MAAMpB,EAAAA,EAAAA,KAACuC,EAAAA,EAAc,IAAI7I,SAAC,qCAKrDsG,EAAAA,EAAAA,KAAClK,EAAO,CAACuE,UAAU,UAASX,UACxBoG,EAAAA,EAAAA,MAAC0C,EAAAA,EAAQ,CAAA9I,SAAA,EACLsG,EAAAA,EAAAA,KAACwC,EAAAA,EAASC,MAAK,CAACC,YAAY,MAAMC,IAAI,MAAKjJ,UACvCsG,EAAAA,EAAAA,KAAC4C,EAAAA,EAAI,CACDlB,MAAO,CACHjM,OAAQ,SAEZoN,WAAYvG,EACZwG,WAAavK,IACTyH,EAAAA,EAAAA,KAAC4C,EAAAA,EAAKG,KAAI,CAAArJ,UACNsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAAC1I,KAAK,OAAO2I,QAASnB,GAAalH,GAAMmB,SAAEnB,WAKlEyH,EAAAA,EAAAA,KAACwC,EAAAA,EAASC,MAAK,CAAA/I,SACVyD,IACG2C,EAAAA,EAAAA,MAAC9J,EAAAA,EAAM,CAAA0D,SAAA,EACHsG,EAAAA,EAAAA,KAACnK,EAAM,CAAC6L,MAAOlM,EAAYkE,UACvBoG,EAAAA,EAAAA,MAAC9J,EAAAA,EAAM,CAAC0L,MAAO,CAAE9L,gBAAiB,QAAS8D,SAAA,EACvCsG,EAAAA,EAAAA,KAAClK,EAAO,CAAA4D,UAACsG,EAAAA,EAAAA,KAAA,MAAAtG,SAAKsC,QACdgE,EAAAA,EAAAA,KAACjK,EAAK,CAAC4L,MAAM,MAAMD,MAAO,CAAE9L,gBAAiB,QAAS8D,UAClDoG,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAAA9G,SAAA,EACFsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACS,MAAMpB,EAAAA,EAAAA,KAACgD,EAAAA,EAAY,IAAK/K,KAAK,UAAU2I,QAAShB,GAAalG,SAAC,kBACtEsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACS,MAAMpB,EAAAA,EAAAA,KAACiD,EAAAA,EAAe,IAAKrC,QAASA,KACxC7D,GAAqB,EAAK,EAC5BrD,SAAC,wBACHsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACS,MAAMpB,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,IAAKpB,QAASA,KACvCU,OAAOrF,KAAK,WAAW/F,KAAa8F,KAAS,EAC/CtC,SAAC,kBAEHsG,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CACP9H,MAAM,2BACN+H,YAAY,6CACZC,UA3H7B7K,IACnB4F,GAAU,IACV0B,MAAM,iBAAiB1I,KAAa8F,KAAU,CAC1C6C,OAAQ,WAEPN,MAAKa,GAAYA,EAASS,SAC1BtB,MAAKe,IACFrC,EAAW,IACX0B,IAAgB,GAClB,EAmH0CyB,SAAW9I,MACX8K,OAAO,SACPC,WAAW,SAAG3I,UAEdsG,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAAC2B,QAAM,EAAClB,MAAMpB,EAAAA,EAAAA,KAACuC,EAAAA,EAAc,IAAI7I,SAAC,8BAM7DsG,EAAAA,EAAAA,KAAClK,EAAO,CAAA4D,UACJsG,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,CACHpJ,MAAOkD,EACPhE,QAASA,EACTuH,SAAW4C,IACPlG,EAAWkG,EAAE,EAEjBC,aAAc,CACVC,aAAa,EACbC,WAAW,EACXC,UAAW,CACP,SAAUC,KAEN5D,MACO,KAInB1G,OAAQuK,UAGRzD,EAAAA,EAAAA,KAAAD,EAAAA,SAAA,gBAKjC,C","sources":["GroupMain.js"],"sourcesContent":["import { h } from 'hastscript';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Layout, Input, Button, Space, Modal, Splitter, List, message, Popconfirm } from 'antd';\r\nimport {\r\n    AppstoreAddOutlined,\r\n    ExportOutlined,\r\n    SearchOutlined,\r\n    DeleteOutlined,\r\n    SaveOutlined,\r\n    HomeOutlined,\r\n    FileZipOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport math from '@bytemd/plugin-math';\r\nimport mathLocale from '@bytemd/plugin-math/locales/zh_Hans.json';\r\nimport 'katex/dist/katex.css';\r\n\r\nimport highlight from '@bytemd/plugin-highlight';\r\nimport 'github-markdown-css';\r\nimport 'highlight.js/styles/vs.css';\r\n\r\nimport mermaid from '@bytemd/plugin-mermaid';\r\nimport mermaidLocale from '@bytemd/plugin-mermaid/locales/zh_Hans.json';\r\n\r\nimport { Editor } from '@bytemd/react';\r\nimport 'bytemd/dist/index.css';\r\nimport zhHans from 'bytemd/locales/zh_Hans.json';\r\nimport gfm from '@bytemd/plugin-gfm';\r\nimport gfmLocale from '@bytemd/plugin-gfm/locales/zh_Hans.json';\r\nimport './ComMain.css';\r\nimport { visit } from 'unist-util-visit'\r\n\r\nimport CryptoJS from 'crypto-js';\r\nimport './GroupMain.css';\r\n\r\nconst headerStyle = {\r\n    height: 60,\r\n    paddingInline: 30,\r\n    lineHeight: '30px',\r\n    backgroundColor: '#fff',\r\n};\r\n\r\nconst { Header, Content, Sider } = Layout;\r\n\r\n\r\nconst imagePrefix = (groupname) => {\r\n    return {\r\n        remark: (processor) =>\r\n            processor.use(() => (tree) => {\r\n                visit(tree, ['image', 'link'], (node) => {\r\n                    if (typeof node.url === 'string' && !node.url.startsWith('http')) {\r\n                        node.url = `${groupname}/${node.url.replace(/^\\/+/, '')}`;\r\n                    }\r\n                });\r\n            }),\r\n    };\r\n}\r\n\r\nconst uploadPlugin = ({ onUpload }) => {\r\n    return {\r\n        editorEffect: ({ editor }) => {\r\n            const cm = editor\r\n            const wrapper = cm.getWrapperElement()\r\n\r\n            const prevent = (e) => {\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n            }\r\n\r\n            // 拖拽上传\r\n            const handleDrop = async (e) => {\r\n                prevent(e)\r\n                const files = Array.from(e.dataTransfer.files)\r\n                for (const file of files) {\r\n                    const url = await onUpload(file)\r\n                    let markdown =\r\n                        file.type.startsWith('image/')\r\n                            ? `![](${url})`\r\n                            : `[${file.name}](${url})`\r\n                    cm.replaceSelection(markdown + '\\n')\r\n                }\r\n            }\r\n\r\n            // 粘贴上传\r\n            const handlePaste = async (e) => {\r\n                const items = e.clipboardData.items\r\n                if (!items) return\r\n\r\n                for (const item of items) {\r\n                    if (item.kind === 'file') {\r\n                        const file = item.getAsFile()\r\n                        if (!file) continue\r\n\r\n                        const url = await onUpload(file)\r\n                        let markdown =\r\n                            file.type.startsWith('image/')\r\n                                ? `![](${url})`\r\n                                : `[${file.name}](${url})`\r\n                        cm.replaceSelection(markdown + '\\n')\r\n                        e.preventDefault()\r\n                    }\r\n                }\r\n            }\r\n\r\n            wrapper.addEventListener('dragover', prevent)\r\n            wrapper.addEventListener('drop', handleDrop)\r\n            wrapper.addEventListener('paste', handlePaste)\r\n\r\n            // 清理函数\r\n            return () => {\r\n                wrapper.removeEventListener('dragover', prevent)\r\n                wrapper.removeEventListener('drop', handleDrop)\r\n                wrapper.removeEventListener('paste', handlePaste)\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\nconst codeCopyPlugin = () => {\r\n    return {\r\n        rehype: (processor) => {\r\n            return processor.use(() => (tree) => {\r\n                visit(tree, 'element', (node, index, parent) => {\r\n                    // 情况1：代码块 <pre><code>\r\n                    if (node.tagName === 'pre' && node.children?.[0]?.tagName === 'code') {\r\n                        const codeNode = node.children[0];\r\n                        const rawCode = codeNode.children.map((child) => child.value || '').join('');\r\n\r\n                        node.children.push(\r\n                            h(\r\n                                'button',\r\n                                {\r\n                                    type: 'button',\r\n                                    class: 'copy-btn',\r\n                                    'data-code': rawCode,\r\n                                    title: '复制代码',\r\n                                },\r\n                                '📋'\r\n                            )\r\n                        );\r\n                        node.properties.className = (node.properties.className || []).concat('with-copy');\r\n                    }\r\n\r\n                    // 情况2：行内代码 <code>\r\n                    if (node.tagName === 'code' && parent?.tagName !== 'pre') {\r\n                        const rawCode = node.children.map((child) => child.value || '').join('');\r\n                        // 包一层 span，让复制按钮能绝对定位\r\n                        parent.children[index] = h(\r\n                            'span',\r\n                            { class: 'inline-code-wrapper' },\r\n                            [\r\n                                node, // 原始 <code>\r\n                                h(\r\n                                    'button',\r\n                                    {\r\n                                        type: 'button',\r\n                                        class: 'inline-copy-btn',\r\n                                        'data-code': rawCode,\r\n                                        title: '复制代码',\r\n                                    },\r\n                                    '📋'\r\n                                ),\r\n                            ]\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n        },\r\n    };\r\n}\r\n\r\n\r\nconst GroupMain = () => {\r\n    const [searchParams] = useSearchParams();\r\n    const groupname = searchParams.get('groupname');\r\n    const plugins = [\r\n        gfm({\r\n            locale: gfmLocale\r\n        }),\r\n        codeCopyPlugin(), // 代码复制插件\r\n        highlight(),\r\n        math({\r\n            locale: mathLocale,\r\n            katexOptions: { output: 'mathml' },\r\n        }),\r\n        mermaid({\r\n            locale: mermaidLocale\r\n        }),\r\n        imagePrefix(groupname),\r\n        uploadPlugin({\r\n            onUpload: (file) => new Promise((resolve, _) => {\r\n                if (!file) {\r\n                    return;\r\n                }\r\n                // 创建FormData对象，用于将文件上传到服务器\r\n                var formData = new FormData();\r\n                // 将拖拽的文件添加到FormData对象中\r\n                var name = `${Date.now()}_${file.name}`;\r\n                formData.append('file', file, name);\r\n                // 创建XMLHttpRequest对象，用于发送请求\r\n                var xhr = new XMLHttpRequest();\r\n                // 监听上传进度\r\n                xhr.upload.addEventListener('progress', (e) => {\r\n                    if (e.lengthComputable) {\r\n                        var percent = (e.loaded / e.total) * 100;\r\n                        percent = parseInt(percent);\r\n                        console.log('上传进度：' + percent + '%');\r\n                    }\r\n                });\r\n                // 监听上传完成事件\r\n                xhr.addEventListener('load', (e) => {\r\n                    console.log('上传完成');\r\n                    resolve(`${mdname}/${name}`);\r\n                });\r\n                // 监听上传出错事件\r\n                xhr.addEventListener('error', (e) => {\r\n                    console.log('上传出错');\r\n                });\r\n                // 监听上传取消事件\r\n                xhr.addEventListener('abort', (e) => {\r\n                    console.log('上传取消');\r\n                });\r\n                // 发送请求\r\n                xhr.open('POST', `/upload/${groupname}/${mdname}`);\r\n                xhr.send(formData);\r\n            }),\r\n        }),\r\n    ]\r\n    const [keywords, setKeywords] = useState(\"\");\r\n    const [markdownList, setMarkdownList] = useState([]);\r\n    // 新建分组模态框start\r\n    const [newMarkdownData, setNewMarkdownData] = useState({});\r\n    const [isNewMarkdownModalOpen, setIsNewMarkdownModalOpen] = useState(false);\r\n    // 新建分组模态框end\r\n\r\n    // 加解密模态框start\r\n    const [cryptoPwd, setCryptoPwd] = useState(\"\");\r\n    const [isCryptoModalOpen, setIsCryptoModalOpen] = useState(false);\r\n    // 加解密模态框end\r\n    const [mdvalue, setMdValue] = useState('');\r\n    const [mdname, setMdName] = useState('');\r\n    const [showEditor, setShowEditor] = useState(false);\r\n    const [messageApi, contextHolder] = message.useMessage();\r\n\r\n    const textRef = useRef(mdvalue);\r\n    const nameRef = useRef(mdname);\r\n\r\n    useEffect(() => {\r\n        textRef.current = mdvalue; // 每次渲染时更新 ref\r\n    }, [mdvalue]);\r\n    useEffect(() => {\r\n        nameRef.current = mdname; // 每次渲染时更新 ref\r\n    }, [mdname]);\r\n\r\n    useEffect(() => {\r\n        const handler = (e) => {\r\n            const btn = e.target.closest('.copy-btn, .inline-copy-btn');\r\n            if (btn) {\r\n                const code = btn.getAttribute('data-code');\r\n                navigator.clipboard.writeText(code).then(() => {\r\n                    // 切换成 ✅ 图标\r\n                    btn.textContent = '✅';\r\n                    setTimeout(() => {\r\n                        btn.textContent = '📋';\r\n                    }, 1500);\r\n                });\r\n            }\r\n        };\r\n\r\n        document.addEventListener('click', handler);\r\n        return () => document.removeEventListener('click', handler);\r\n    }, [mdvalue]);\r\n\r\n    const fetchMarkdowns = () => {\r\n\r\n        fetch('/search-detail', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                group: groupname,\r\n                query: keywords\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(d => {\r\n                if (d.ok) {\r\n                    setMarkdownList(d.data);\r\n                    if (d.data) {\r\n                        openMarkdown(d.data[0])();\r\n                    }\r\n                } else {\r\n                    messageApi.open({\r\n                        type: 'error',\r\n                        content: d.msg,\r\n                    });\r\n                }\r\n            });\r\n    };\r\n\r\n    useEffect(fetchMarkdowns, []);\r\n\r\n    const saveMarkdown = () => {\r\n        fetch(`/update-markdown/${groupname}/${nameRef.current}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/text'\r\n            },\r\n            body: textRef.current\r\n        })\r\n            .then(response => response.json())\r\n            .then(d => {\r\n                if (d.ok) {\r\n                    // 通知保存成功\r\n                    messageApi.open({\r\n                        type: 'success',\r\n                        content: '保存成功',\r\n                    });\r\n                } else {\r\n                    messageApi.open({\r\n                        type: 'error',\r\n                        content: d.msg,\r\n                    });\r\n                }\r\n            });\r\n    };\r\n    const newMarkdown = () => {\r\n        fetch(`/new-markdown/${groupname}/${newMarkdownData.mdname}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/text'\r\n            },\r\n            body: `## 操作介绍\r\n* Ctrl+S保存\r\n* 图片支持复制粘贴、拖拽`\r\n        })\r\n            .then(response => response.json())\r\n            .then(d => {\r\n                if (d.ok) {\r\n                    fetchMarkdowns();\r\n                    setIsNewMarkdownModalOpen(false);\r\n                } else {\r\n                    messageApi.open({\r\n                        type: 'error',\r\n                        content: d.msg,\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    const openMarkdown = (mdname) => () => {\r\n        if (!mdname) {\r\n            return;\r\n        }\r\n        setMdName(mdname);\r\n        fetch(`/${groupname}/${mdname}.md`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Cache-Control': 'no-cache'\r\n            }\r\n        })\r\n            .then(response => response.text())\r\n            .then(d => {\r\n                setMdValue(d);\r\n                setShowEditor(true);\r\n            });\r\n    };\r\n    const deleteConfirm = (e) => {\r\n        setMdName(\"\");\r\n        fetch(`/del-markdown/${groupname}/${mdname}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(response => response.text())\r\n            .then(d => {\r\n                setMdValue(\"\");\r\n                fetchMarkdowns();\r\n            });\r\n    };\r\n    const deleteGroupConfirm = (e) => {\r\n        fetch(`/del-group/${groupname}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(response => response.text())\r\n            .then(d => {\r\n                window.location.href = \"/\";\r\n            });\r\n    };\r\n    const encrypt = () => {\r\n        var _enmd = CryptoJS.AES.encrypt(mdvalue, cryptoPwd).toString();\r\n        setMdValue(_enmd);\r\n    };\r\n    const decrypt = () => {\r\n        var _demd = CryptoJS.AES.decrypt(mdvalue, cryptoPwd).toString(CryptoJS.enc.Utf8);\r\n        setMdValue(_demd);\r\n    };\r\n    return (\r\n        <>\r\n            {contextHolder}\r\n            <Modal title=\"新建文档\" open={isNewMarkdownModalOpen} onOk={newMarkdown} onCancel={() => {\r\n                setIsNewMarkdownModalOpen(false);\r\n            }}>\r\n                <Input placeholder='文档名称' value={newMarkdownData.mdname} onChange={(e) => {\r\n                    setNewMarkdownData({\r\n                        mdname: e.target.value\r\n                    })\r\n                }}></Input>\r\n            </Modal>\r\n            <Modal title=\"加解密\" open={isCryptoModalOpen} onOk={() => {\r\n                setIsCryptoModalOpen(false);\r\n            }} onCancel={() => {\r\n                setIsCryptoModalOpen(false);\r\n            }}>\r\n                <Space direction=\"vertical\">\r\n                    <Input.Password placeholder='密码' value={cryptoPwd} onChange={(e) => {\r\n                        setCryptoPwd(e.target.value);\r\n                    }} />\r\n                    <Space>\r\n                        <Button type=\"primary\" onClick={encrypt}>加密</Button>\r\n                        <Button onClick={decrypt}>解密</Button>\r\n                    </Space>\r\n                </Space>\r\n            </Modal>\r\n            <Layout className=\"layout\">\r\n                <Header className=\"header\">\r\n                    <Space>\r\n                        {groupname}\r\n                        <Button icon={<HomeOutlined />} onClick={() => {\r\n                            window.location.href = \"/\";\r\n                        }}>首页</Button>\r\n                        <Space.Compact style={{ width: '100%' }}>\r\n                            <Input onKeyDown={(k) => {\r\n                                if (k.code === \"Enter\") {\r\n                                    fetchMarkdowns();\r\n                                }\r\n                            }} value={keywords} placeholder=\"关键词\" onChange={(e) => setKeywords(e.target.value)} />\r\n                            <Button onClick={fetchMarkdowns} icon={<SearchOutlined />}>搜索</Button>\r\n                        </Space.Compact>\r\n                        <Button icon={<AppstoreAddOutlined />} onClick={() => {\r\n                            setIsNewMarkdownModalOpen(true);\r\n                        }}>新建文档</Button>\r\n                        <Button icon={<ExportOutlined />} onClick={() => {\r\n                            window.open(`/export/${groupname}`);\r\n                        }}>导出分组</Button>\r\n                        <Popconfirm\r\n                            title=\"删除分组\"\r\n                            description=\"确认删除分组？\"\r\n                            onConfirm={deleteGroupConfirm}\r\n                            onCancel={(e) => { }}\r\n                            okText=\"是\"\r\n                            cancelText=\"否\"\r\n                        >\r\n                            <Button danger icon={<DeleteOutlined />}>删除分组</Button>\r\n                        </Popconfirm>\r\n\r\n                    </Space>\r\n                </Header>\r\n                <Content className=\"content\">\r\n                    <Splitter>\r\n                        <Splitter.Panel defaultSize=\"15%\" max=\"70%\">\r\n                            <List\r\n                                style={{\r\n                                    height: '750px'\r\n                                }}\r\n                                dataSource={markdownList}\r\n                                renderItem={(item) => (\r\n                                    <List.Item>\r\n                                        <Button type='link' onClick={openMarkdown(item)}>{item}</Button>\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n                        </Splitter.Panel>\r\n                        <Splitter.Panel>\r\n                            {showEditor ?\r\n                                <Layout>\r\n                                    <Header style={headerStyle}>\r\n                                        <Layout style={{ backgroundColor: '#fff' }}>\r\n                                            <Content><h1>{mdname}</h1></Content>\r\n                                            <Sider width=\"40%\" style={{ backgroundColor: '#fff' }}>\r\n                                                <Space>\r\n                                                    <Button icon={<SaveOutlined />} type=\"primary\" onClick={saveMarkdown}>保存</Button>\r\n                                                    <Button icon={<FileZipOutlined />} onClick={() => {\r\n                                                        setIsCryptoModalOpen(true);\r\n                                                    }}>加解密</Button>\r\n                                                    <Button icon={<ExportOutlined />} onClick={() => {\r\n                                                        window.open(`/export/${groupname}/${mdname}`);\r\n                                                    }}>导出</Button>\r\n\r\n                                                    <Popconfirm\r\n                                                        title=\"删除文章\"\r\n                                                        description=\"确认删除文档？\"\r\n                                                        onConfirm={deleteConfirm}\r\n                                                        onCancel={(e) => { }}\r\n                                                        okText=\"是\"\r\n                                                        cancelText=\"否\"\r\n                                                    >\r\n                                                        <Button danger icon={<DeleteOutlined />}>删除</Button>\r\n                                                    </Popconfirm>\r\n                                                </Space>\r\n                                            </Sider>\r\n                                        </Layout>\r\n                                    </Header>\r\n                                    <Content>\r\n                                        <Editor\r\n                                            value={mdvalue}\r\n                                            plugins={plugins}\r\n                                            onChange={(v) => {\r\n                                                setMdValue(v);\r\n                                            }}\r\n                                            editorConfig={{\r\n                                                lineNumbers: true,\r\n                                                autofocus: false,\r\n                                                extraKeys: {\r\n                                                    \"Ctrl-S\": () => {\r\n                                                        // 保存\r\n                                                        saveMarkdown();\r\n                                                        return true; // 返回 true 表示事件已被处理\r\n                                                    }\r\n                                                },\r\n                                            }}\r\n                                            locale={zhHans}\r\n                                        />\r\n                                    </Content>\r\n                                </Layout> : <></>}\r\n                        </Splitter.Panel>\r\n                    </Splitter>\r\n                </Content>\r\n            </Layout>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default GroupMain;\r\n"],"names":["headerStyle","height","paddingInline","lineHeight","backgroundColor","Header","Content","Sider","Layout","imagePrefix","groupname","remark","processor","use","tree","visit","node","url","startsWith","replace","uploadPlugin","_ref","onUpload","editorEffect","_ref2","editor","cm","wrapper","getWrapperElement","prevent","e","preventDefault","stopPropagation","handleDrop","async","files","Array","from","dataTransfer","file","markdown","type","name","replaceSelection","handlePaste","items","clipboardData","item","kind","getAsFile","addEventListener","removeEventListener","GroupMain","searchParams","useSearchParams","get","plugins","gfm","locale","gfmLocale","rehype","index","parent","_node$children","_node$children$","tagName","children","rawCode","map","child","value","join","push","h","class","title","properties","className","concat","highlight","math","mathLocale","katexOptions","output","mermaid","mermaidLocale","Promise","resolve","_","formData","FormData","Date","now","append","xhr","XMLHttpRequest","upload","lengthComputable","percent","loaded","total","parseInt","console","log","mdname","open","send","keywords","setKeywords","useState","markdownList","setMarkdownList","newMarkdownData","setNewMarkdownData","isNewMarkdownModalOpen","setIsNewMarkdownModalOpen","cryptoPwd","setCryptoPwd","isCryptoModalOpen","setIsCryptoModalOpen","mdvalue","setMdValue","setMdName","showEditor","setShowEditor","messageApi","contextHolder","message","useMessage","textRef","useRef","nameRef","useEffect","current","handler","btn","target","closest","code","getAttribute","navigator","clipboard","writeText","then","textContent","setTimeout","document","fetchMarkdowns","fetch","method","headers","body","JSON","stringify","group","query","response","json","d","ok","data","openMarkdown","content","msg","saveMarkdown","text","_jsxs","_Fragment","_jsx","Modal","onOk","newMarkdown","onCancel","Input","placeholder","onChange","Space","direction","Password","Button","onClick","encrypt","_enmd","CryptoJS","toString","decrypt","_demd","Utf8","icon","HomeOutlined","window","location","href","Compact","style","width","onKeyDown","k","SearchOutlined","AppstoreAddOutlined","ExportOutlined","Popconfirm","description","onConfirm","okText","cancelText","danger","DeleteOutlined","Splitter","Panel","defaultSize","max","List","dataSource","renderItem","Item","SaveOutlined","FileZipOutlined","Editor","v","editorConfig","lineNumbers","autofocus","extraKeys","Ctrl-S","zhHans"],"sourceRoot":""}